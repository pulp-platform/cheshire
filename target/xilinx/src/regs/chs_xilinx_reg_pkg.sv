// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package chs_xilinx_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 5;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic [3:0]  q;
  } chs_xilinx_reg2hw_fan_ctl_reg_t;

  typedef struct packed {
    logic        q;
  } chs_xilinx_reg2hw_fan_sw_override_reg_t;

  typedef struct packed {
    logic [7:0]  q;
  } chs_xilinx_reg2hw_leds_reg_t;

  typedef struct packed {
    logic [15:0] q;
  } chs_xilinx_reg2hw_dram_aw_delay_reg_t;

  typedef struct packed {
    logic [15:0] q;
  } chs_xilinx_reg2hw_dram_w_delay_reg_t;

  typedef struct packed {
    logic [15:0] q;
  } chs_xilinx_reg2hw_dram_b_delay_reg_t;

  typedef struct packed {
    logic [15:0] q;
  } chs_xilinx_reg2hw_dram_ar_delay_reg_t;

  typedef struct packed {
    logic [15:0] q;
  } chs_xilinx_reg2hw_dram_r_delay_reg_t;

  typedef struct packed {
    logic [3:0]  d;
    logic        de;
  } chs_xilinx_hw2reg_fan_ctl_reg_t;

  // Register -> HW type
  typedef struct packed {
    chs_xilinx_reg2hw_fan_ctl_reg_t fan_ctl; // [92:89]
    chs_xilinx_reg2hw_fan_sw_override_reg_t fan_sw_override; // [88:88]
    chs_xilinx_reg2hw_leds_reg_t leds; // [87:80]
    chs_xilinx_reg2hw_dram_aw_delay_reg_t dram_aw_delay; // [79:64]
    chs_xilinx_reg2hw_dram_w_delay_reg_t dram_w_delay; // [63:48]
    chs_xilinx_reg2hw_dram_b_delay_reg_t dram_b_delay; // [47:32]
    chs_xilinx_reg2hw_dram_ar_delay_reg_t dram_ar_delay; // [31:16]
    chs_xilinx_reg2hw_dram_r_delay_reg_t dram_r_delay; // [15:0]
  } chs_xilinx_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    chs_xilinx_hw2reg_fan_ctl_reg_t fan_ctl; // [4:0]
  } chs_xilinx_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] CHS_XILINX_FAN_CTL_OFFSET = 5'h 0;
  parameter logic [BlockAw-1:0] CHS_XILINX_FAN_SW_OVERRIDE_OFFSET = 5'h 4;
  parameter logic [BlockAw-1:0] CHS_XILINX_LEDS_OFFSET = 5'h 8;
  parameter logic [BlockAw-1:0] CHS_XILINX_DRAM_AW_DELAY_OFFSET = 5'h c;
  parameter logic [BlockAw-1:0] CHS_XILINX_DRAM_W_DELAY_OFFSET = 5'h 10;
  parameter logic [BlockAw-1:0] CHS_XILINX_DRAM_B_DELAY_OFFSET = 5'h 14;
  parameter logic [BlockAw-1:0] CHS_XILINX_DRAM_AR_DELAY_OFFSET = 5'h 18;
  parameter logic [BlockAw-1:0] CHS_XILINX_DRAM_R_DELAY_OFFSET = 5'h 1c;

  // Register index
  typedef enum int {
    CHS_XILINX_FAN_CTL,
    CHS_XILINX_FAN_SW_OVERRIDE,
    CHS_XILINX_LEDS,
    CHS_XILINX_DRAM_AW_DELAY,
    CHS_XILINX_DRAM_W_DELAY,
    CHS_XILINX_DRAM_B_DELAY,
    CHS_XILINX_DRAM_AR_DELAY,
    CHS_XILINX_DRAM_R_DELAY
  } chs_xilinx_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] CHS_XILINX_PERMIT [8] = '{
    4'b 0001, // index[0] CHS_XILINX_FAN_CTL
    4'b 0001, // index[1] CHS_XILINX_FAN_SW_OVERRIDE
    4'b 0001, // index[2] CHS_XILINX_LEDS
    4'b 0011, // index[3] CHS_XILINX_DRAM_AW_DELAY
    4'b 0011, // index[4] CHS_XILINX_DRAM_W_DELAY
    4'b 0011, // index[5] CHS_XILINX_DRAM_B_DELAY
    4'b 0011, // index[6] CHS_XILINX_DRAM_AR_DELAY
    4'b 0011  // index[7] CHS_XILINX_DRAM_R_DELAY
  };

endpackage

